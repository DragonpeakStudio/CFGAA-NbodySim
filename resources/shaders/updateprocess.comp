#version 430 core

layout(local_size_x = 100, local_size_y = 1, local_size_z = 1) in;
struct Particle
{
  vec4 position;
  vec3 velocity;
  float radius;
  vec3 colour;
  float mass;
};

layout(std430, binding = 0) buffer particlesIn {

  Particle particleIn[];
};
layout(std430, binding = 1) buffer particlesOut {

  Particle particleOut[];
};
uniform float delta;
uniform float gravConst = 6.674*pow(10, -2.);//physical is 6.674*10^-11 but this is to small to work accurately so use a higher value
uniform float springCoeff = 10.;
uniform float dampCoeff = .08;


void main()
{
  Particle p = particleIn[gl_GlobalInvocationID.x];
  vec3 sum = vec3(0);
  for(uint i = 0; i < particleIn.length(); i++)
  {
    if(i != gl_GlobalInvocationID.x)
    {

      vec3 vec = particleIn[i].position.xyz-p.position.xyz;
      float dist2 = dot(vec,vec);
      float dist = sqrt(dist2);
      vec3 nvec = vec/dist;
      if(dist < p.radius+particleIn[i].radius)
      {//collision based on https://developer.nvidia.com/gpugems/gpugems3/part-v-physics-simulation/chapter-29-real-time-rigid-body-simulation-gpus
        vec3 repusiveForce = nvec*(-springCoeff*(p.radius*2-dist));
        vec3 dampeningForce = (particleIn[i].velocity-p.velocity)*dampCoeff;
        sum+=repusiveForce+dampeningForce;
      }
      sum += nvec*gravConst*((particleIn[i].mass*p.mass)/dist2);
      
    }
  }
  p.velocity += sum*delta;
  p.position.xyz += p.velocity*delta;

  particleOut[gl_GlobalInvocationID.x] = p;
}